#!/bin/bash

#!/bin/bash
help(){
        cat <<EOF 
Usage: ts_network_backup  [OPTION]
Create or restore network backup.

        -h              	prints this message
        -c ticket number 	create network backup
	-r backup directory 	restore network backup. The backup directory should be in the foramt date-ticket_number.
	-d 			Data only. Use of this option is strongly discouraged.
	-u 			Users and data only. Use of this option is discouraged.		
	Use this to create or restore network backups. By default it will attempt to restore users, their data and settings, and the progams installed on the machine. 
EOF
        exit 0
}


# config options
group_file="/home/group"
password_file="/home/passwords"
shadow_file="/home/shadows"
dkpg_file="/home/dpkg.out"

# source common functions
FUNCTIONS=ts_functions.sh # /path/to../
source $FUNCTIONS


# script specific functions

backup_paswords(){
	cat /etc/passwd| while read line ; do 
		user=$(echo $line | awk -F : '{print $1}')
		user_uid=$(echo $line | awk -F : '{print $3}')
		# if UID >999 then is normal (non-system) user
		if [[ $user_uid -gt 999 ]] ; then
			# unless user is a nobody :)
			if [[ ! $user == "nobody" ]]; then
				id $user >>$group_file
				echo $line >>$password_file
				# /etc/shadow contains the date of last password
				# change. Having this be older than the install
				# should not be a problem, but noting just in case
				grep $user /etc/shadow >>$shadow_file
			fi
		fi
	done
}

#### TODO TODO TODO #######
restore_passwords(){
	# note that copying files back across is not sufficient 
	# need to extract values form files and added to new copies

#	# read /home/password file 
#	# if user not in /etc/ password then append to /etc/password /etc/shadow
#	# else (e.g. oem) usermod uid gid, check home ownership  passwd -e oem or 
#	# overwrite shadow
#	#fi
#	# read /home/group usermod to addusers to groups 	
}


#### TODO TODO TODO #######
backup_groups(){
}

#### TODO TODO TODO #######
restore_groups(){
}

backup_apt(){
	if  ! dpkg --get-selections > $dpkg_file ; then
		echo 2
	else
		echo 0
	fi 
}

restore_apt(){
        if  ! dpkg --set-selections < $dpkg_file ; then
                exit=2
        else
                exit=0
        fi
	
	echo $exit
}

restore_packages(){
	if  ! apt-get -u dselect-upgrade  ; then
                exit=2
        else
                exit=0
        fi

        echo $exit
}

### MAIN ###

while getopts ":hc:r:du" option; do
        case $option in
                h) help
                   exit 0
                ;;
                c) create_backup="true"
                   ticket_number=$OPTARG
		;;
		r) restore_backup="true"
                   backup_dir=$OPTARG
		;;
		d) data_only="true"
		;;
		u) users_and_data_only="true"
		;;
                /?) help
                    exit 1
                ;;
        esac
	done

#sanity checks
if [[ $create_backup ]] && [[ $restore_backup ]]; then 
	echo "Only one of the c or r options can be used";
	exit 2
fi

if [[ $create_backup ]] && [[ ! $ticket_number ]]; then 
        echo "You must supply a ticket number with the c option";
        exit 2
fi

if [[ $restore_backup ]] && [[ ! $backup_dir ]]; then
        echo "You must supply a backup directory with the r option";
        exit 2
fi

root_test=$(test_for_root)
if [[ $root_test -ne 0 ]]; then
        echo "Could not proceed!"
        echo "Are you root?"
        exit 2
fi


# create
#rsync -avzh home/ tsbackup@tsbackup:/var/tsbackup/[date-ticketnumber] 2>rsync.out 
#  dpkg --get-selections > dpkg.out 

# restore
#  sudo rsync -avzh  tsbackup@tsbackup:/var/tsbackup/[date-ticketnumber] /home
#dpkg --set-selections < dpkg.out
#apt-get -u dselect-upgrade

