#!/bin/bash
# CONFIGURATION
# The following files should be set on/by install and are not intended to be user editable
#User definable Configuration is in the following file. Note it is intended to be a shared file.
CONFIG_FILE="ts_network_backup.cfg"
MAIN_FUNCTIONS="ts_functions.sh" # /path/to../
NB_FUNCTIONS="ts_network_backup_functions.sh"
# Config ends
source $CONFIG_FILE

help(){
        cat <<EOF 
Usage: ts_network_backup  [OPTION(S)]
Create or restore network backup. 

By default it backs up the contents of /home, the users on the system and the 
packages that have been installed (via apt-get, Ubuntu Software Center etc). 

        -h              	Prints this message
        -c [ticket number] 	Create network backup
	-r [backup directory] 	Restore network backup. The backup directory 
				should be in the format date-ticket_number.
	-d 			Data only. Does not backup/restore users or 
				packages.
				Use of this option is strongly discouraged.
	-u 			Users and data only. Does not backup/restore 
				packages. 
				Use of this option is discouraged.
	-l [log file]		Log messages to file rather than stdout.
				Be careful not to use the same path for backing
				up and restoring, or the  log file may get 
				overwritten.
	-t [addendum]		Normally this script checks to see if a ticket
				number looks like a "real" ticket number. 
				(i.e. it has the correct number of numbers). 
				This option lets you add things to this number. 
				It's useful if you are backing up more than one
				computer and want to store them in different 
				folders referring to the same ticket.
				e.g. 00001-A and 00001-B
				Takes letters, numbers and _only. - is added automatically.  
	-a /path/to/directory   Alternative directory to backup. Implies  -d i.e. does not backup/restore users or packages.
				Use this if you want to backup something
				other than the home directory.
				Suggests the use of -A for restoring backups.
	-f 			force the backup of a single file rather than a directory 
	-F			Force the overwriting an existing backup
	-A /path/to/directory	Use this to restore the backup to somewhere
				other than the default (/home)
                                Can be used with or without -u or -d 
				suggests the later (required if needed). 
	-p /path/to/home	Use this if the home folder you want to
				backup is not in its usual place i.e. if you
				to backup an external/mounted drive 
				rather than /home.
				You do not need to add home on the end but the
				script does not mind either way. 
				Can be used with or without -u or -d. 	
	
	Use this to create or restore network backups. By default it will attempt to restore users, their data and settings, and the progams installed on the machine. 


EOF
}
 
# source common functions
source $MAIN_FUNCTIONS
source $NB_FUNCTIONS

### MAIN ###

if [[ -z $1 ]]; then
		help
                exit 1
        fi

while getopts ":hc:r:l:t:a:A:p:dufF" option; do
       case $option in
                h) help
                   exit 0
                ;;
                c) create_backup="true"
                   ticket_number="$OPTARG"
		   backup_dir="$(date +%Y%m%d)-${ticket_number}"
		;;
		r) restore_backup="true"
                   backup_dir="$OPTARG"
		;;
		d)
		   data_only="true"
                   no_apt="true"
                   no_user_passwords="true"
                ;;
                u) no_apt="true"
                   users_and_data_only="true"
                ;;        
		l) use_log="true"
		   logfile="$OPTARG" # N.B. truly global read inside function
		;;
		t)
		   addendum=$OPTARG
		;;
		a) no_apt="true"
                   no_user_passwords="true"
                   data_only="true"
		   alt_path="true"
		   path="$OPTARG"
		;;
		A) path="$OPTARG"
		;;
		p) 
		   cut_path=$(echo "$OPTARG" |sed -r -e 's:/home/?$::' -e 's/\/*$//') 
		   ext_path=$cut_path
		   path="${cut_path}/home"
		   chroot_path="chroot $ext_path"
		;;
		f) force_file="true"
		;;
		F) force_overwrite="true"
		;;
        	\?)
      		   write_msg "Invalid option: -$OPTARG" >&2
      		   exit 1
      		;;
    		:)
      		   write_msg "Option -$OPTARG requires an argument." >&2
      		   exit 1
      		;;
		esac
done

# process options
if [[ $use_log ]]; then	
	if [[ ! $logfile ]]; then
		echo  "You forgot to specify a logfile!"
		echo "Using ts_backup.log in the current directory."
		log_file="ts_backup.log"
	fi
	if [[ $(check_file_write "$logfile") -ne 0 ]]; then
		echo "Couldn't write to $logfile"
		echo "Is it on a writable file system?"
		exit 3
	fi
fi



if [[ $create_backup  &&  $restore_backup ]]; then 
	write_msg "Only one of the -c or -r options can be used" 
	exit 

elif [[ ! $create_backup && ! $restore_backup ]]; then 
        write_msg "One of the -c or -r (or -h help) options must  be used. Arguments must be supplied with -c & -r." 
        exit 3

elif [[ $data_only  &&  $users_and_data_only ]]; then
        write_msg "The -d or -a and -u options are mutually exclusive" 
        exit 3
elif [[ $force_file &&  ! $alt_path ]]; then
	write_msg "the -a option must be used with -f" 
	exit 3
else
	# set paths etc
	if [[ ! $path ]]; then 
		path="/home/"
		# ext_path is only need if we are working relative to something other than /
		# i.e. is null
	fi
fi

#sanity checks
if ! test_for_root ; then
                write_msg "Could not proceed!" 
                write_msg "Are you root?" 
                exit 3
fi

# check to see if path is actually a directory etc
if [[ $path ]] ; then 
	check_dir_read $path
	error=$?
	if [[ $error == "5" ]] ; then 
		write_msg "$path does not exist!" 
		exit $error
	elif [[ $error == "4" ]] ; then
		write_msg "$path is not readable!" 
		exit $error
	elif [[ $error == "6"  ]] ; then
		if [[ ! $force_file ]] ; then
			write_msg "$path is not a directory! This is probably not what you meamt to do" 
			write_msg "if you really meant to use back up a single file use -f option with -a" 
			exit $error
		fi
	fi
	if ! check_file_write $path; then
		write_msg "$path is not writeable" 
		exit 3
	fi
fi

# create backup checks
if [[ $create_backup ]] ; then
	# test for valid ticket number
	#N.B. actually tests for 5 digits
	if ! check_ticket_number $ticket_number; then
			write_msg "$ticket_number is not a valid ticket number" 
			exit 3
	fi
	# if overwriting of backups not forced with -F 
	if [[  ! $force_overwrite ]]; then
		if check_for_backup_dir $backup_user $backup_host $backup_path $backup_dir; then
			write_msg "Backup directory already exists!"   
			write_msg "Cowardly refusing to overwrite it" 
			exit 3
		fi
	fi
	# add addendum to ticket number if present
	if [[ $addendum ]]; then
		
		if ! check_valid_chars $addendum; then 
			write_msg "Only nubers, letters and _ can be added to a ticket number" 
			write_msg "You do not need to use - it will will be added automatically" 
			exit 3
		fi
	fi
fi

# restore backup checks
if [[ $restore_backup ]]; then

	if ! check_valid_backup_dir $backup_dir; then
		write_msg "This doesn't look like a valid backup directory, sorry. exiting..."
		exit 3
	fi

	if ! check_for_backup_dir $backup_user $backup_host $backup_path $backup_dir; then
		write_msg "Backup directory does not exist"  
		write_msg "Cowardly refusing to restore from non-existant backup" 
		exit 3
	fi
fi
# if this machine is tsdata a path must be supplied
# otherwise some dumbass will back up the wrong thing
if [[ ! $ext_path && $HOSTNAME = "tsdata" ]]; then
	write_msg "YOU MUST USE THE -p OPTION TO SPECIFY THE PATH OF THE 
DIRECTORY YOU WISH TO BACKUP WHEN YOU ARE ON TSDATA!!!"	
	exit 3
fi
 

# if -f (force backup of single file) not used
if [[ ! $force_file ]]; then
	# ensure path has / on the end
	if [[ ${path:${#path}-1} != "/" ]]; then
		path="${path}/"
	fi
	# Set Common paths
	if [[ ! $no_user_passwords ]]; then 
	group_file="${path}groups"
	password_file="${path}passwords"
	shadow_file="${path}shadows"
	fi
	if [[ ! $no_apt ]]; then
	dpkg_file="${path}dpkg.out"
	sources_path="${path}apt/"
	fi
fi


#################
# Create Backup #
#################

if [[ $create_backup ]]; then

	# unless no_apt is set back up record of packages installed
	if [[ ! $no_apt ]]; then
                if ! backup_sources_msg="$(backup_sources $sources_path $ext_path)" ; then
	                write_msg "Encountered problem backing up software sources"         
			write_msg "$backup_sources_msg" 
                        exit 3
		else
			write_msg "$backup_sources_msg" 
		fi

		if ! aptbackup="$(backup_apt $dpkg_file $ext_path)"; then
			write_msg "Backing up package files list failed!" 
                        write_msg "$aptbackup" 	
			write_msg "dpkg --get-selections exited with error code $aptbackup_return"  
			exit 3
		else
			write_msg "Backed up a list of installed packages" $log_fiile
		fi
	fi

	if [[ ! $no_user_passwords ]]; then
		if ! backup_users_check="$(backup_users_test "$path")"; then
			write_msg "$backup_users_check" 
			exit 3		  
		elif ! user_backup=$(backup_users "$path" "$ext_path");then
			write_msg "$user_backup" 
			exit 3
		else
			write_msg "$user_backup" 
		fi
	fi
	
	# backs up /etc, don't run if backing up alternate path or data only
	if [[ ! data_only ]]; then
		if ! config_check=$(backup_config $path $ext_path); then
			write_msg "Could not backup /etc" 
			exit $config_check
		fi
	fi

	echo "Preparing to rsync network backup..."

	if ! make_backup="$(create_backup $path $backup_user $backup_host $backup_path $backup_dir )"; then
		write_msg "$make_backup" 
		exit 2
	else
		write_msg "Successfully created network backup on $backup_host at ${backup_path}/${backup_dir}" 
	fi

##################
# Restore Backup #
##################
elif [[ $restore_backup ]] ; then
        # not the same as backup_password_files
        if ! backup_passwords_check=$(backup_passwords $ext_path); then
		write_msg "$backup_passwords_check" 
		write_msg "Failed to backup password files ..exiting" 
		exit 3
	else
		write_msg "$backup_passwords_check" 
	fi

        
	if ! restorebackup=$(restore_backup $backup_user $backup_host $backup_path $backup_dir $path); then
		restore_check=$?
		write_msg "$restorebackup" 
                write_msg "WARNING! Could not restore backup!!!" 
                exit $restore_check
	else
		if [[ ! $no_user_passwords ]];  then
			if ! restore_users_test=$(restore_users $path $ext_path); then
				write_msg "error message: $restore_users_test" 
				write_msg $restore_users_test 
				write_msg "WARNING! users may have been deleted from the system" 
				write_msg "Before proceeding restore $backup_passwords_check" 
				write_msg "to /etc/passwd /etc/shadow /etc/group" 
				exit 3
			else 
				write_msg "Restored users" 
			fi
		fi

		if [[ ! $no_apt ]]; then
		# add test [if -A and not -d (-or u) then] i
		# do the user etc/apt files exist? no? warn / ignore
		# Actually restore_packages will check and exit if not found
		# we can let the user figure it out from there.
		
		
			sources_file="$sources_path/sources.list"
			# if user had multiverse enabled
			grep multiverse $sources_file
			multiverse_test=$?
			# if user had partner software enabled
			grep partner $sources_file
			partner_test=$?
			codename=$($chroot_path lsb_release -c |  awk '{print $2}') # lucid etc
			if (( $multiverse_test == 0 )); then
			#identify and comment out  relevant lines 
				if ! multiverse_restore=$(restore_multiverse $codename $ext_path); then	
					write_msg "WARNING: unable to add multiverse to sources list" 
					write_msg "$multiverse_restore" 
					exit 3
				fi
			else
				write_msg "Added multiverse to software sources" 
			fi

			if (( $partner_test == 0 )); then
			 #identify and comment out  relevant lines 
				if ! restore_partners $codename $ext_path; then
					write_msg "unable to add Canonical partners to software sources" 
				else
					write_msg "Added Canonical partners to software sources" 
				fi
      			fi

			# check to see if any PPA files in sources.list.d
			if [[ -n "$(ls -A $sources_path/sources.list.d)" ]]; then
				cp -R "$sources_path/sources.list.d/*" $ext_path/etc/apt/sources.list.d
			else
                        	write_msg "Added PPA's to software sources" 
			fi
		
			if ! packagerestore=$(restore_packages $dpkg_file $ext_path); then
				write_msg "$packagerestore" 
				exit 3
			else
				write_msg "$packagerestore" 
			fi
		fi # End no-apt

	write_msg "Backup successfully restored" 
	fi

#######################
# restore backup ends #
#######################

else	
	# Should never get here as we should have caught it 
	# at the top of the sanity check
	echo "You should never see this message. If you are reading it now something is very, very wrong."
	exit 1
fi

# Clean up after ourselves -- leaves backup of /etc in place 

if [[ ! $data_only ]]; then
 	if [[ ! $no_apt ]]; then
		to_remove="/home/apt /home/dpkg.out /home/passwd /home/shadow /home/group"
	else
		to_remove="${toremove} /home/passwd /home/shadow /home/group"
	fi
	# runs rm -r on files/dirs
	if ! cleanup $to_remove; then
		echo "Could not remove $to_remove, you may need to remove these manually. Alternatively they may not have been there in the first place and you should investigate why."
		exit 3
	fi
fi
exit 0
