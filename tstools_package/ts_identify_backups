#!/bin/bash
# CONFIGURATION
# The following files should be set on/by install and are not intended to be user editable
#User definable Configuration is in the following file. Note it is intended to be a shared file.
CONFIG_FILE="ts_network_backup.cfg"
MAIN_FUNCTIONS="ts_functions.sh" # /path/to../
# Config ends
source $CONFIG_FILE

help(){
cat <<EOF 

usage: $0 [OPTION] 
Indentifies backups for ticket
Example: $0 -t 12345

-h			prints this message
-t [ticket number]	Ticket number to look up (won't work without this).
-o [file]		Saves a list of backups to [file]
 
This script will attempt to identify existing backups on $backup_host from 
a given ticket number. It returns a list of all candidates it finds and will
optionally save a list of them to a file.
	  	
EOF

if [[ -n $1 && $(echo {0..255}) =~ $1 ]]; then
	exit $1
else
	exit 0
fi
}
# source common functions
source $MAIN_FUNCTIONS

# FUNCTIONS

# gets a list of folders that contain the ticket nuimber in thier name 
get_candidates(){
	local ticketnumber=$1
	local backupuser=$2
	local backuphost=$3
	local backuppath=$4
	list_command="ls $backuppath | grep $ticketnumber"
	# ssh into backup server and list contents of backup directory
	candidatelist=$(/usr/bin/ssh ${backupuser}@${backuphost} "$list_command")
	clreturn=$?
	echo "$candidatelist"
	return $clreturn
}

#FUNCTIONS END


# process option arguments
while getopts "ht:o:" option; do		
	case "$option" in
		h) help;;
		t) ticket_number=$OPTARG;;
		o) output_file=$OPTARG;;
		[?])  echo "bad option supplied" ; 
			help;;	
	esac
done

# Check  for valid ticket number
if ! [[ -n $ticket_number ]]; then
	echo "You must supply a valid ticket number with the -t option"
	help 3
fi
if ! check_ticket_number $ticket_number; then
	echo "This doesn't look like a valid ticket number!"
	echo "You should use the ticket number only (not any backup dirs)"
	exit 3
fi

# get a list of folders and check return value, thne ouyt put folders or error message 
candidate_list=$(get_candidates $ticket_number $backup_user $backup_host $backup_path)
get_can_return=$?
if [[ $get_can_return -eq 0 ]]; then
	for folder in $candidate_list; do
		write_msg "$folder" $output_file 
	done
elif [[ $get_can_return -eq 1  ]]; then
	echo "No matching folders found"
else
	echo "Error $get_can_return connecting  to $backup_host"
fi
exit $get_can_return	
