#!/usr/bin/python


# http://akiscode.com/articles/sha-1directoryhash.shtml
# Copyright (c) 2009 Stephen Akiki
# MIT License (Means you can do whatever you want with this)
#  See http://www.opensource.org/licenses/mit-license.php
# Error Codes:
#   -1 -> Directory does not exist
#   -2 -> General error (see stack traceback)

# Modified 2012, Paul Munday
import sys
import os
#import StringI0
import hashlib

### FUNCTIONS ###

# arg(h)! 10.04 is running python 2.6.5 so no argparse
if sys.version_info[0] == 2 and sys.version_info[1] <= 6:
    # use optparse for older versions of python
    def get_arg():
        '''processes command line arguments and returns a single argument (directory))'''
        from optparse import OptionParser
        parser = OptionParser(
                usage='usage: %prog /path/to/directory',
                description='produces an SHA-1 hash of a directory and its contents (including subdirectories)',
                epilog='returns 0 on success, 1 if directory not found, otherwise 2')
        (options, args) = parser.parse_args()
        if len(args) != 1:
            parser.error("wrong number of arguments")
        else:
            return args[0]
else:
    # use argparse for current versions of python
    def get_arg():
        '''processes command line arguments and returns a single argument (directory))'''
        import argparse
        parser = argpase.ArgumentParser(
            description='produces an SHA-1 hash of a directory and its contents (including subdirectories)', 
            epilog = 'returns 0 on success, 1 if directory not found, otherwise 2')
        parser.add_argument('directory', 
            help = '/path/to/directory    directory to generate a hash of',
            type = string)
        args = parser.parse_args()
        if len(args) != 1:
            parser.error("wrong number of arguments")
         else:
            return args[0]

def GetHashofDirs(directory, verbose=0):
  """returns a SHA-1 hash of a directory"""
  SHAhash = hashlib.sha1()
  if not os.path.exists (directory):
    return -1
    
  try:
    for root, dirs, files in os.walk(directory):
      for names in files:
        if verbose == 1:
          print 'Hashing', names
        filepath = os.path.join(root,names)
        try:
          f1 = open(filepath, 'rb')
        except:
          # You can't open the file for some reason
          f1.close()
          continue

	while 1:
	  # Read file in as little chunks
  	  buf = f1.read(4096)
	  if not buf : break
	  SHAhash.update(hashlib.sha1(buf).hexdigest())
        f1.close()

  except:
    import traceback
    # Print the stack traceback
    traceback.print_exc()
    return -2

  return SHAhash.hexdigest()


### END OF FUNCTIONS ###

directory = get_arg()
print GetHashofDirs(directory, 0)
