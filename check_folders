#!/bin/bash
help(){
cat <<EOF
Usage : $0 [OPTION]
Lists folders due for deletion (and sends email)
    -l [LIMIT]      Check for folders older than LIMIT days. Default 45.
	-m 		        Send email rather than printing to stdout.
    -p [PATH]       Use this option to specify the path of the backup dir
    -d [PATH]       Use this option to specify the mountpoint/drive 
                    the backup folder is stored on
	-r [EMAIL]	    Specify optional adress to send email to. 
			        It is not necessary to specify an address. 
			        There is one set by default in the script.
			        Requires the -m option.
	-f [EMAIL]	    Set the from email adress. It is not necessary to 
			        specify an address. There is one set by default in
			        the script. Requires the -m option.
	-h 		        print this message

This script prints info about backup folders or files that are due for deletion. It is primarily intended for use with cron. 
EOF

if [[ -n $1 && $(echo {0..255}) =~ $1 ]]; then
        exit $1
else
        exit 0
fi
}


# process option arguments
while getopts "hl:mr:f:p:" option; do
        case "$option" in
                h) help;;
                l) limit=$OPTARG;; 
                m) mail=true;;
		        r) recipient=$OPTARG;;
		        f) sender=$OPTARG;;
                p) backup_path=$OPTARG;;
                d)backup_drive=$OPTARG;;
                \?)  echo "bad option supplied" 
                       help 2
		;;
        esac
done
if [[ $recipient && ! $mail ]]; then
	echo "The -r option requires the use of -m"
elif [[ $sender && ! $mail ]]; then
        echo "The -f option requires the use of -m"
fi 


# default variables
if [[ $mail ]]; then
	if [[ -z $recipient ]]; then
		recipient="support-staff@lists.freegeek.org"
	fi
	if [[ -z $sender ]]; then
                sender="paulm@freegeek.org "
        fi
fi

backup_host=$HOSTNAME
default_backup_path="/srv/tsbackup"
default_backup_drive="/srv"
if [[ -z $backup_path ]]; then
    backup_path=$default_backup_path
fi

if [[ ! -e $backup_path ]]; then
    echo "$backup_path does not exist!"
    exit 3
fi

if [[ -z $backup_drive ]]; then
    backup_path=$default_backup_drive
fi

if [[ ! -e $backup_drive]]; then
    echo "$backup_drive does not exist!"
    exit 3
fi


if [[ -z $limit ]]; then
    limit=45
fi

tmpfile="$HOME/.folder_check.tmp"
diskfree="$( df -h | grep "$backup_drive" | awk '{print "Used: " $3 " Free: " $4"  "  $5 " full." }')"
echo "Usage Stats for $backup_drive on $backup_host:" >>$tmpfile
echo $diskfree >>$tmpfile


# declare assoc arrays for ticket lists
declare -A resolved
declare -A unresolved
declare -A unsound

if [[ $limit -ne 45 ]]; then
    limit_string="--limit $limit"
fi

if [[ $backup_path != $default_backup_path ]]; then
    backup_path_string="--path $backup_path"
fi

for dir in $(${path}outdated $backup_path_string $limit_string); do
    ticket=$(echo $dir | awk -F - '{print $2}' | sed 's/[^0-9]*//g')
    while read line; do
        if [[ $line =~  "Subject:" ]]; then 
            subject=$(echo -n $line | awk '{$1=""; print $0}')
        elif [[ $line =~ "Status:" ]]; then
            status=$(echo -n $line | awk '{$1=""; print $0}')
        fi
    done < <(wget --keep-session-cookies  --save-cookies cookies.txt  --post-data 'user=tsrobot&pass=EucNabs4' -qO-  todo.freegeek.org/REST/1.0/ticket/${ticket}/show/)
    size=$(du -sh ${backup_path}/${dir} | awk '{print $1}')

    if [[ $status =~ "resolved" ]]; then    # push ticket on to list
                                            #  of resolved tickets

        resolved_ticket_list=(${resolved_ticket_list[@]}  "$dir")
        # store details in associative array (fake multi_dimensional)
        for value in dir size status subject; do
            resolved[${dir}_$value]=${!value}
        done

    else        # push ticket on to list of unresolved tickets

        unresolved_ticket_list=(${unresolved_ticket_list[@]}  "$dir")
        # store details in associative array (fake multi_dimensional)
        for value in dir size status subject; do
            unresolved[${dir}_$value]=${!value}
        done
    fi
    unset subject # otherwise it occasionally gets reused
done

if (( ${#resolved_ticket_list[@]} > 0 )); then
    echo >>$tmpfile
    echo "The following directories are older than $limit days and can be deleted:" >>$tmpfile
#printf "/srv/tsbackup/%s\t%s\t%s\t%s\n" "$dir" "$size" "$status" "$subject" >>$tmpfile
    for resolved_ticket in ${resolved_ticket_list[@]}; do
        # referencing our fake multi-D array
        printf "$backup_path/%s\t%s\t%s\t%s\n" "${resolved[${resolved_ticket}_dir]}" "${resolved[${resolved_ticket}_size]}" "${resolved[${resolved_ticket}_status]}" "${resolved[${resolved_ticket}_subject]}" >>$tmpfile
    done
    echo >> $tmpfile
    # repeat so we have a command short cut
    echo "You can use the following commands if you are sure the folders can be deleted" >>$tmpfile
    echo >>$tmpfile
    echo "cd $backup_path" >>$tmpfile
    echo -n "rm -r " >>$tmpfile
    for resolved_ticket in ${resolved_ticket_list[@]}; do
    #    echo -n  "${resolved[${resolved_ticket}_dir]} " >> $tmpfile
        echo -n  "$resolved_ticket " >> $tmpfile
    done
    echo >>$tmpfile
fi

# we have tickets that have a status that is not resolved
if (( ${#unresolved_ticket_list[@]} > 0 )); then
    echo  >>$tmpfile
    echo "The following tickets are older than $limit days but are not marked as resolved," >>$tmpfile
    echo "you should manually inspect the ticket before proceeding." >>$tmpfile
    #loop over list of unresolved tickets
    for unresolved_ticket in ${unresolved_ticket_list[@]}; do
        # referencing our fake multi-D array
        printf "$backup_path/%s\t%s\t%s\t%s\n" "${unresolved[${unresolved_ticket}_dir]}" "${unresolved[${unresolved_ticket}_size]}" "${unresolved[${unresolved_ticket}_status]}" "${unresolved[${unresolved_ticket}_subject]}" >>$tmpfile
    done
fi


# if its the beginning of the year check for wrong dates
if (( $(date +%m) < 3 )); then 
    for dir in $(${path}newyearcheck $backup_path); do
        ticket=$(echo $dir | awk -F - '{print $2}')
        while read line; do
            if [[ $line =~  "Subject:" ]]; then 
                subject=$(echo -n $line | awk '{$1=""; print $0}')
            elif [[ $line =~ "Status:" ]]; then
                status=$(echo -n $line | awk '{$1=""; print $0}')
            fi
        done < <(wget --keep-session-cookies  --save-cookies cookies.txt  --post-data 'user=tsrobot&pass=EucNabs4' -qO-  todo.freegeek.org/REST/1.0/ticket/${ticket}/show/)
        size=$(du -sh ${backup_path}/${dir} | awk '{print $1}')
        unsound_ticket_list=(${unsound_ticket_list[@]}  "$ticket")
        # store details in associative array (fake multi_dimensional)
        for value in dir size status subject; do
            unsound[${ticket}_$value]=${!value}
        done
    done     
    
    if (( ${#unsound_ticket_list[@]} > 0 )); then
        echo  >>$tmpfile
        echo "The following directories  appear to be  older than 300 days" >> $tmpfile 
        echo "Someone may not know what year it is." >>$tmpfile
        #loop over list of unresolved tickets
        for unsound_ticket in ${unsound_ticket_list[@]}; do
        # referencing our fake multi-D array
        printf "$backup_path/%s\t%s\t%s\t%s\n" "${unsound[${unsound_ticket}_dir]}" "${unsound[${unsound_ticket}_size]}" "${unsound[${unsound_ticket}_status]}" "${unsound[${unsound_ticket}_subject]}" >>$tmpfile
    done
    
    fi
fi

if [[ $mail ]]; then
	 mailx -n -r $sender -s "Folders that can be deleted on $backup_host" $recipient < $tmpfile
else
	cat $tmpfile
fi
rm $tmpfile 
